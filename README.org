Project to keep my notes organized for "Cataclysm: Dark Days Ahead" (C:DDA) development

* Organization
** Directory Structure
  - README.org - This file
  - src/
    - cdda/    - ~git subtree~ of C:DDA master branch
    - cdda-gh-pages/ - ~git subtree~ of C:DDA gh-pages branch
** Branch Names
   - remotes/
     - upstream/
       - gh-pages
       - master
     - github/
       - main
   - main         - The main working branch	 
   - upstream-*   - Branches holding fetches from the main project
   - pr-#-*       - Branches that will be submitted upstream as a pull request
   - wip-*        - Branches that are unstable. **Warning** may be rebased 
** GitHub
   Project development coordination is done on GitHub.  Structure supports
   pull requests like the rest of the developers.
*** [[https://github.com/CleverRaven/Cataclysm-DDA][CleverRaven / Cataclysm-DDA]]
    - Official Repository used by developers
    - Branches we care about: master, gh-pages
*** [[https://github.com/ghiknt/contrib-cdda-fork][ghiknt / contrib-cdda-fork]]
    - Fork of "CleverRaven / Cataclysm-DDA" Master Branch
    - Pull requests will be submited from branches here
*** [[https://github.com/ghiknt/contrib-cdda][ghiknt / contrib-cdda]]
    - Fork of "CleverRaven / Cataclysm-DDA"
      - master renamed to upstream-master
      - gh-pages renamed to upstream-gh-pages
      - 0-F-branch renamed to upstream-0-F-branch
      - All other forked branches deleted on github
      - main created with master & gh-pages as git subtree's

* git commands
** Creation
   
   #+begin_src shell
     # Initialization
     cd ~/src/contrib
     mkdir -p cdda/src
     cd cdda
     git init
     # README file addition
     git add README.org
     git commit -m "doc: Initial project creation and addition of README.org"

     # Add .gitignore using gitignore.io with ~emacs~ and ~c++~ as a base
     git add .gitignore
     git commit -m "feat: Initial gitignore file." -m "From https://www.toptal.com/developers/gitignore/api/emacs,c++." -m "SPDX-License-Identifier: MIT"

     # Rename master to main to fit current conventions
     git branch -m master main
     # Add remotes for main project and subtree
     git remote add github git@github.com:ghiknt/contrib-cdda.git
     git remote add upstream https://github.com/CleverRaven/Cataclysm-DDA.git

     # Push main project to github
     git push -u github main



     # Save changes to README.org so we have a clean repository to allow the subtree add
     git add README.org
     git commit -m "doc: Updates to README.org"

     # Add C:DDA main branch
     git subtree add --prefix src/cdda fork master

     # Add C:DDA gh-pages branch
     git subtree add --prefix src/cdda-gh-pages fork gh-pages

     # Create initial branches tracking the upstream branches created by subtree
     git branch --track upstream-master remotes/fork/master
     git branch --track upstream-gh-pages remotes/fork/gh-pages

     # Commit README.org with setup and then push it all back to github
     git add README.org
     git commit -m "doc: Initial configuration commands added"
     git push github main upstream-master upstream-gh-pages
     # Received ~remote: fatal: pack exceeds maximum allowed size~
     # Fixed in next section
   #+end_src

   - Use ideas from [[https://gist.github.com/maxrodrigo/b893bf76f68588766d602a57f10c4ff8][git-split-and-push.sh]] by [[https://gist.github.com/maxrodrigo][Max Rodrigo]] to push changes in smaller groups


   #+begin_src shell

     git-split-and-push () {
	 git checkout $BRANCH
	 # check if the branch exists on the remote
	 if git show-ref --quiet --verify refs/remotes/$REMOTE/$BRANCH; then
	     # if so, only push the commits that are not on the remote already
	     range=$REMOTE/$BRANCH..HEAD
	 else
	     # else push all the commits
	     range=HEAD
	 fi
	 # count the number of commits to push
	 n=$(git log --first-parent --format=format:x $range | wc -l)

	 # push each batch
	 for i in $(seq $n -$BATCH_SIZE 1); do
	     # get the hash of the commit to push
	     h=$(git log --first-parent --reverse --format=format:%H --skip $i -n1)
	     echo "Pushing $h..."
	     git push $REMOTE $h:refs/heads/$BRANCH
	 done

	 # push the final partial batch
	 git push $REMOTE HEAD:refs/heads/$BRANCH
     }

     REMOTE=github
     BATCH_SIZE=500
     # Do upstream-master
     BRANCH=upstream-master
     git-split-and-push
     # Do upstream-gh-pages
     BRANCH=upstream-gh-pages
     git-split-and-push
     # Do main
     BRANCH=main
     git-split-and-push
   #+end_src
   
* Commit notes
  - The project encourages use of [[https://www.conventionalcommits.org/en/v1.0.0/#specification][Conventional Commits]]
    - types I use
      - fix:   - per spec
      - feat:  - per spec
      - doc:   - documentation updates
      - wip:   - Commit to capture changes to in progress work.  Should be squashed out of submitted branches
  - Commits should be split between main project and subtrees in ./src/*    
